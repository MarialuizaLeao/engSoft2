"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createExecute = void 0;
var child_process_1 = require("child_process");
var os_1 = require("os");
var path_1 = __importDefault(require("path"));
var createExecute = function (base, output, currentProcessRef, exitCodeRef) {
    return function (runner, command, runFrom) {
        return new Promise(function (accept) {
            var _a;
            output.replaceStrings = (_a = {},
                _a[(0, os_1.homedir)()] = '{{homedir}}',
                _a["/private".concat(base)] = '{{base}}',
                _a[base] = '{{base}}',
                _a['[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]'] = '',
                _a[''] = '',
                _a);
            var args = command
                .split(' ')
                .map(function (arg) {
                return arg.includes('./') ? path_1.default.join(process.cwd(), arg) : arg;
            });
            var shell = (0, child_process_1.spawn)(runner, args, {
                cwd: runFrom ? path_1.default.join(base, runFrom) : path_1.default.join(base),
            });
            shell.stdin.setDefaultEncoding('utf8');
            if (currentProcessRef) {
                currentProcessRef.current = shell;
            }
            shell.stdout.on('data', function (s) { return (output.stdout = [s]); });
            shell.stderr.on('data', function (s) { return (output.stderr = [s]); });
            shell.on('close', function (code) {
                if (exitCodeRef) {
                    exitCodeRef.current = code;
                }
                return accept({
                    code: code,
                    stdout: output.stdout,
                    stderr: output.stderr,
                });
            });
            shell.unref();
            shell = null;
        });
    };
};
exports.createExecute = createExecute;
