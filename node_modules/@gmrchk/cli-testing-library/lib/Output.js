"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Output = void 0;
var Output = /** @class */ (function () {
    function Output() {
        var _this = this;
        this._stdoutHandlers = [];
        this._stderrHandlers = [];
        this._stdout = [];
        this._stderr = [];
        this.replaceStrings = {};
        this.processStdLineSet = function (value, type) {
            value.forEach(function (input) {
                input
                    .toString()
                    .split('\n')
                    .forEach(function (line) {
                    _this[type].push(line);
                });
            });
        };
        this.processStdLineGet = function (buffer) {
            var output = buffer
                .map(function (line) {
                var output = line.toString();
                for (var _i = 0, _a = Object.entries(_this.replaceStrings); _i < _a.length; _i++) {
                    var _b = _a[_i], original = _b[0], replaced = _b[1];
                    var reg = new RegExp(original, 'gm');
                    output = output.replace(reg, replaced);
                    output = output.trim();
                }
                return output;
            })
                .filter(function (line) { return line !== ''; });
            return output;
        };
        this.on = function (handler, type) {
            if (type === 'stdout') {
                _this._stdoutHandlers.push(handler);
                return;
            }
            if (type === 'stderr') {
                _this._stderrHandlers.push(handler);
                return;
            }
            _this._stdoutHandlers.push(handler);
            _this._stderrHandlers.push(handler);
        };
        this.off = function (handler, type) {
            if (type === 'stdout') {
                _this._stdoutHandlers = _this._stdoutHandlers.filter(function (item) { return item !== handler; });
                return;
            }
            if (type === 'stderr') {
                _this._stderrHandlers = _this._stderrHandlers.filter(function (item) { return item !== handler; });
                return;
            }
            _this._stdoutHandlers = _this._stdoutHandlers.filter(function (item) { return item !== handler; });
            _this._stderrHandlers = _this._stderrHandlers.filter(function (item) { return item !== handler; });
        };
    }
    Object.defineProperty(Output.prototype, "stdout", {
        get: function () {
            return this.processStdLineGet(this._stdout);
        },
        set: function (value) {
            this.processStdLineSet(value, '_stdout');
            this._stdoutHandlers.forEach(function (fn) {
                fn(value[0], 'stdout');
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Output.prototype, "stderr", {
        get: function () {
            return this.processStdLineGet(this._stderr);
        },
        set: function (value) {
            this.processStdLineSet(value, '_stderr');
            this._stderrHandlers.forEach(function (fn) {
                fn(value[0], 'stderr');
            });
        },
        enumerable: false,
        configurable: true
    });
    return Output;
}());
exports.Output = Output;
