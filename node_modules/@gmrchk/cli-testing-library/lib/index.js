"use strict";
/** @license CLI testing library
 * Copyright (c) Georgy Marchuk.
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareEnvironment = exports.relative = exports.fsAccess = exports.fsReadDir = exports.fsMakeTempDir = exports.fsMakeDir = exports.fsRemoveDir = exports.fsRemove = exports.fsWrite = exports.fsRead = exports.copy = void 0;
var fs_1 = require("fs");
var path_1 = __importDefault(require("path"));
var util_1 = require("util");
var os_1 = require("os");
var Output_1 = require("./Output");
var utils_1 = require("./utils");
var createExecute_1 = require("./createExecute");
var keyToHEx_1 = require("./keyToHEx");
exports.copy = (0, util_1.promisify)(fs_1.copyFile);
exports.fsRead = (0, util_1.promisify)(fs_1.readFile);
exports.fsWrite = (0, util_1.promisify)(fs_1.writeFile);
exports.fsRemove = (0, util_1.promisify)(fs_1.unlink);
exports.fsRemoveDir = (0, util_1.promisify)(fs_1.rmdir);
exports.fsMakeDir = (0, util_1.promisify)(fs_1.mkdir);
exports.fsMakeTempDir = (0, util_1.promisify)(fs_1.mkdtemp);
exports.fsReadDir = (0, util_1.promisify)(fs_1.readdir);
exports.fsAccess = (0, util_1.promisify)(fs_1.access);
var relative = function (p) { return path_1.default.resolve(__dirname, p); };
exports.relative = relative;
var prepareEnvironment = function () { return __awaiter(void 0, void 0, void 0, function () {
    var hasCalledCleanup, startedTasks, tempDir, relative, cleanup, execute, spawn, exists_1, makeDir_1, writeFile_1, readFile_1, removeFile, removeDir, ls, e_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                hasCalledCleanup = { current: false };
                startedTasks = [];
                return [4 /*yield*/, (0, exports.fsMakeTempDir)(path_1.default.join((0, os_1.tmpdir)(), 'cli-testing-library-'))];
            case 1:
                tempDir = _a.sent();
                relative = function (p) { return path_1.default.resolve(tempDir, p); };
                cleanup = function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                hasCalledCleanup.current = true;
                                startedTasks.forEach(function (task) {
                                    var _a, _b, _c, _d, _e;
                                    (_a = task.current) === null || _a === void 0 ? void 0 : _a.kill(0);
                                    (_b = task.current) === null || _b === void 0 ? void 0 : _b.stdin.end();
                                    (_c = task.current) === null || _c === void 0 ? void 0 : _c.stdin.destroy();
                                    (_d = task.current) === null || _d === void 0 ? void 0 : _d.stdout.destroy();
                                    (_e = task.current) === null || _e === void 0 ? void 0 : _e.stderr.destroy();
                                    task.current = null;
                                });
                                return [4 /*yield*/, (0, exports.fsRemoveDir)(tempDir, { recursive: true })];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); };
                _a.label = 2;
            case 2:
                _a.trys.push([2, 3, , 5]);
                execute = function (runner, command, runFrom) { return __awaiter(void 0, void 0, void 0, function () {
                    var output, currentProcessRef, scopedExecute;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                output = new Output_1.Output();
                                currentProcessRef = { current: null };
                                scopedExecute = (0, createExecute_1.createExecute)(tempDir, output, currentProcessRef);
                                startedTasks.push(currentProcessRef);
                                return [4 /*yield*/, scopedExecute(runner, command, runFrom)];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    });
                }); };
                spawn = function (runner, command, runFrom) { return __awaiter(void 0, void 0, void 0, function () {
                    var output, currentProcessRef, exitCodeRef, currentProcessPromise, scopedExecute, waitForText, wait, waitForFinish, writeText, pressKey, kill, debug;
                    return __generator(this, function (_a) {
                        output = new Output_1.Output();
                        currentProcessRef = { current: null };
                        exitCodeRef = { current: null };
                        currentProcessPromise = null;
                        scopedExecute = (0, createExecute_1.createExecute)(tempDir, output, currentProcessRef, exitCodeRef);
                        startedTasks.push(currentProcessRef);
                        currentProcessPromise = scopedExecute(runner, command, runFrom);
                        waitForText = function (input) {
                            return new Promise(function (resolve) {
                                var handler = function (value) {
                                    if (value.toString().includes(input)) {
                                        resolve({
                                            type: 'stdout',
                                            line: value.toString(),
                                        });
                                        output.off(handler);
                                    }
                                };
                                output.on(handler);
                            });
                        };
                        wait = function (delay) {
                            return new Promise(function (resolve) {
                                setTimeout(resolve, delay);
                            });
                        };
                        waitForFinish = function () { return __awaiter(void 0, void 0, void 0, function () {
                            var _a;
                            return __generator(this, function (_b) {
                                if (currentProcessPromise) {
                                    (_a = currentProcessRef.current) === null || _a === void 0 ? void 0 : _a.stdin.end();
                                    return [2 /*return*/, currentProcessPromise];
                                }
                                return [2 /*return*/, new Promise(function (resolve) {
                                        resolve({
                                            code: exitCodeRef.current,
                                            stdout: output.stdout,
                                            stderr: output.stderr,
                                        });
                                    })];
                            });
                        }); };
                        writeText = function (input) { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                return [2 /*return*/, new Promise(function (resolve) {
                                        if ((0, utils_1.checkRunningProcess)(currentProcessRef)) {
                                            currentProcessRef.current.stdin.write(input, function () {
                                                return resolve();
                                            });
                                        }
                                    })];
                            });
                        }); };
                        pressKey = function (input) { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                return [2 /*return*/, new Promise(function (resolve) {
                                        if ((0, utils_1.checkRunningProcess)(currentProcessRef)) {
                                            currentProcessRef.current.stdin.write((0, keyToHEx_1.keyToHEx)(input), function () {
                                                resolve();
                                            });
                                        }
                                    })];
                            });
                        }); };
                        kill = function (signal) {
                            if ((0, utils_1.checkRunningProcess)(currentProcessRef)) {
                                currentProcessRef.current.kill(signal);
                            }
                        };
                        debug = function () {
                            var handler = function (value, type) {
                                process[type].write(value);
                            };
                            output.on(handler);
                        };
                        return [2 /*return*/, {
                                wait: wait,
                                waitForFinish: waitForFinish,
                                waitForText: waitForText,
                                pressKey: pressKey,
                                writeText: writeText,
                                kill: kill,
                                debug: debug,
                                getStdout: function () { return output.stdout; },
                                getStderr: function () { return output.stderr; },
                                getExitCode: function () { return exitCodeRef.current; },
                            }];
                    });
                }); };
                exists_1 = function (path) { return __awaiter(void 0, void 0, void 0, function () {
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _b.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, (0, exports.fsAccess)(relative(path))];
                            case 1:
                                _b.sent();
                                return [2 /*return*/, true];
                            case 2:
                                _a = _b.sent();
                                return [2 /*return*/, false];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                makeDir_1 = function (path) { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, (0, exports.fsMakeDir)(relative(path), { recursive: true })];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); };
                writeFile_1 = function (p, content) { return __awaiter(void 0, void 0, void 0, function () {
                    var dir;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                dir = path_1.default.dirname(relative(p));
                                return [4 /*yield*/, exists_1(dir)];
                            case 1:
                                if (!!(_a.sent())) return [3 /*break*/, 3];
                                return [4 /*yield*/, makeDir_1(dir)];
                            case 2:
                                _a.sent();
                                _a.label = 3;
                            case 3: return [4 /*yield*/, (0, exports.fsWrite)(relative(p), content)];
                            case 4:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); };
                readFile_1 = function (path) { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, (0, exports.fsRead)(relative(path))];
                            case 1: return [2 /*return*/, (_a.sent()).toString()];
                        }
                    });
                }); };
                removeFile = function (path) { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, (0, exports.fsRemove)(relative(path))];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    });
                }); };
                removeDir = function (path) { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, (0, exports.fsRemoveDir)(relative(path))];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    });
                }); };
                ls = function (path) { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, (0, exports.fsReadDir)(path ? relative(path) : tempDir)];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    });
                }); };
                return [2 /*return*/, {
                        path: tempDir,
                        cleanup: cleanup,
                        writeFile: writeFile_1,
                        readFile: readFile_1,
                        removeFile: removeFile,
                        removeDir: removeDir,
                        ls: ls,
                        exists: exists_1,
                        makeDir: makeDir_1,
                        execute: execute,
                        spawn: spawn,
                    }];
            case 3:
                e_1 = _a.sent();
                return [4 /*yield*/, cleanup()];
            case 4:
                _a.sent();
                throw e_1;
            case 5: return [2 /*return*/];
        }
    });
}); };
exports.prepareEnvironment = prepareEnvironment;
